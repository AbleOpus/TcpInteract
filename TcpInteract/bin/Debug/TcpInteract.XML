<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TcpInteract</name>
    </assembly>
    <members>
        <member name="T:TcpInteract.ClientBase">
            <summary>
            Provides the base functionality for a <see cref="N:TcpInteract"/> TCP client.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.ReceiveSendGuard">
            <summary>
            Gets or sets whether the client should receive or send data. This is a code guard
            which guards against SocketExceptions when the client is disconnected. When true,
            send and receive operations will be terminated more quickly.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.Status">
            <summary>
            Gets the connection status of the client.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.SocketHandle">
            <summary>
            Gets the handle of the client's socket.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.Socket">
            <summary>
            Gets or sets this client's socket used for small data transfers.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.Name">
            <summary>
            Gets or sets the name of this client. This is also the clients identifier. Two clients
            with the same name cannot log into the same TcpInteract server. The name must be set before
            the client logs in.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot change client name while logged in.</exception>
        </member>
        <member name="P:TcpInteract.ClientBase.ConnectionTime">
            <summary>
            Gets the time in which this client has established a connection. 
            </summary>
        </member>
        <member name="P:TcpInteract.ClientBase.LoggedInTime">
            <summary>
            Gets the time in which this client has logged in. 
            </summary>
        </member>
        <member name="E:TcpInteract.ClientBase.StatusChanged">
            <summary>
            Occurs when the value of the <see cref="P:TcpInteract.ClientBase.Status"/> property has changed.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.OnStatusChanged">
            <summary>
            Raises the <see cref="E:TcpInteract.ClientBase.StatusChanged"/> event.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.OnLoggedOut(TcpInteract.LogoutContent)">
            <summary>
            Raises when a client logs out.
            </summary>
            <param name="content">Content that describes what client has logged out and for what reason.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.OnNamesReceived(TcpInteract.ClientNamesContent)">
            <summary>
            Raises when a list of client names has been received.
            </summary>
            <param name="content">Content that lists the names of all clients logged in.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.OnLoggedIn(TcpInteract.LoginContent)">
            <summary>
            Raises when a client has logged in.
            </summary>
            <param name="content">Content to describe a successful client login.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.OnPackageReceived(TcpInteract.Package)">
            <summary>
            Raises when a client received a completed <see cref="T:TcpInteract.Package"/>.
            Not calling the base implementation of this methods will cause the client
            to malfunction.
            </summary>
            <param name="package">The package that has been received.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.OnClientTimedOut">
            <summary>
            Raises when the client has disconnected ungracefully. This disconnect is detected
            only when the client sends or receives.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.ResetClient">
            <summary>
            Resets the client for reconnection. Implement any prestige logic here.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.IsInactiveTaskAsync(System.Int32)">
            <summary>
            Gets whether the client is actively connected asynchronously.
            </summary>
            <param name="waitTime">The wait time in microseconds.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.IsInactive(System.Int32)">
            <summary>
            Gets whether the client is actively connected.
            </summary>
            <param name="waitTime">The wait time in microseconds.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.ProcessReceived(System.Byte[])">
            <summary>
            Processes the bytes received by this client.
            </summary>
            <param name="recBuffer">Only received bytes and no leftovers.</param>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageAsyncBase(System.Int32)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageAsyncBase(TcpInteract.Package)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageTaskAsyncBase(TcpInteract.Package)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
            <returns>How many bytes were sent.</returns>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageTaskAsyncBase(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
            <returns>How many bytes were sent.</returns>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageAsyncBase(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageBase(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the package synchronously to the server.
            </summary>
            <returns>Returns the amount of data sent in bytes.</returns>
        </member>
        <member name="M:TcpInteract.ClientBase.SendPackageBase(TcpInteract.Package)">
            <summary>
            Sends the package synchronously to the server.
            </summary>
            <returns>Returns the amount of data sent in bytes.</returns>
        </member>
        <member name="M:TcpInteract.ClientBase.StartReceiving">
            <summary>
            Begins receiving data asynchronously.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.Equals(TcpInteract.ClientBase)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TcpInteract.ClientBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TcpInteract.ClientBase.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TcpInteract.ClientBase.op_Equality(TcpInteract.ClientBase,TcpInteract.ClientBase)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:TcpInteract.ClientBase.op_Inequality(TcpInteract.ClientBase,TcpInteract.ClientBase)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:TcpInteract.ClientBase.Dispose">
            <summary>
            Releases all resources associated with this instance.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientBase.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:TcpInteract.ClientInfo">
            <summary>
            Represents significant information about a <see cref="T:TcpInteract.ClientBase"/> instance.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientInfo.Status">
            <summary>
            Gets the connection status of the client.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientInfo.Name">
            <summary>
            Gets the name of the client.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientInfo.ConnectionTime">
            <summary>
            Gets the time in which this client has established a connection. 
            </summary>
        </member>
        <member name="P:TcpInteract.ClientInfo.LoggedInTime">
            <summary>
            Gets the time in which this client has logged in. 
            </summary>
        </member>
        <member name="M:TcpInteract.ClientInfo.#ctor(TcpInteract.ClientStatus,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ClientInfo"/> class with the
            specified arguments.
            </summary>
            <param name="status">The connection status of the client.</param>
            <param name="name">The name of the client.</param>
            <param name="connectionTime">The time in which this client has established a connection. </param>
            <param name="loggedInTime">The time in which this client has logged in. </param>
        </member>
        <member name="M:TcpInteract.ClientInfo.FromClient(TcpInteract.ClientBase)">
            <summary>
            Gets the significant information from a client.
            </summary>
            <param name="client">The client to extract the information from.</param>
            <returns>Null, if <para>client</para> is null.</returns>
        </member>
        <member name="M:TcpInteract.ClientInfo.GetLines(System.String)">
            <summary>
            Gets the client info as an array of strings.
            </summary>
            <param name="format">The format to use for each line. {0} is the name
            of the property and {1} is the value.</param>
        </member>
        <member name="M:TcpInteract.ClientInfo.ToString">
            <summary>
            Converts the instance to a single-line string.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientInfo.ToString(System.String,System.String)">
            <summary>
            Converts to a string that represents the current object.
            </summary>
            <param name="format">The format to use for individual lines. {0} is the name
            of the property and {1} is the value.</param>
            <param name="lineSeperator">The string to use in between lines.</param>
        </member>
        <member name="T:TcpInteract.ClientSideClient">
            <summary>
            Represents a TCP client to be used in client-side applications.
            </summary>
        </member>
        <member name="F:TcpInteract.ClientSideClient.connectionAttempts">
            <summary>
            How many connection attempts have been made.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientSideClient.Pusher">
            <summary>
            Gets the content pusher notification system for the client.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientSideClient.EndPoint">
            <summary>
            Get or sets the endpoint to connect to.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientSideClient.MaxConnectionAttempts">
            <summary>
            Gets or sets the maximum amount of attempts before the ConnectionAborted event raises
            (0 is unlimited).
            </summary>
        </member>
        <member name="P:TcpInteract.ClientSideClient.ClientNames">
            <summary>
            Gets a bindable list of client names.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ClientSideClient"/> class with the specified
            optional argument.
            </summary>
            <param name="context">The synchronization context to use for thread marshaling.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnConnectionRefused(TcpInteract.ConnectionRefusedContent)">
            <summary>
            Raises when the server has refused the connection of the client.
            </summary>
            <param name="content">Describes why the server rejected the client.</param>
        </member>
        <member name="E:TcpInteract.ClientSideClient.ConnectionAttemptFailed">
            <summary>
            Occurs when a connection has been attempted and was failed.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnConnectionAttemptFailed(TcpInteract.ConnectionAttemptFailedEventArgs)">
            <summary>
            Raises the <see cref="E:TcpInteract.ClientSideClient.ConnectionAttemptFailed"/> event.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnServerClosed(TcpInteract.ServerClosedContent)">
            <summary>
            Raises when the server has closed.
            </summary>
            <param name="content">Content describing the occurrence.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnNamesReceived(TcpInteract.ClientNamesContent)">
            <summary>
            Raises when a list of client names has been received.
            </summary>
            <param name="content">Content that lists the names of all clients logged in.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnLoggedIn(TcpInteract.LoginContent)">
            <summary>
            Raises when a client has logged in.
            </summary>
            <param name="content">Content to describe a successful client login.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnLoggedOut(TcpInteract.LogoutContent)">
            <summary>
            Raises when a client logs out.
            </summary>
            <param name="content">Content that describes what client has logged out and for what reason.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnClientTimedOut">
            <summary>
            Raises when the client has disconnected ungracefully. This disconnect is detected
            only when the client sends or receives.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.OnPackageReceived(TcpInteract.Package)">
            <summary>
            Raises when a client received a completed <see cref="T:TcpInteract.Package"/>.
            Not calling the base implementation of this methods will cause the client
            to malfunction.
            </summary>
            <param name="package">The package that has been received.</param>
        </member>
        <member name="M:TcpInteract.ClientSideClient.AbortConnect">
            <summary>
            Stops the connector from trying to connect. Does not guarantee abortion.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.Syncronize">
            <summary>
            Request synchronization data.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.Logout">
            <summary>
            Sends a logout message to the server. There is no need to call <see cref="M:TcpInteract.ClientBase.Dispose"/>
            right after calling this method.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the client is not logged in.</exception>
        </member>
        <member name="M:TcpInteract.ClientSideClient.Logout(TcpInteract.LogoutReason)">
            <summary>
            Sends a logout message to the server. There is no need to call <see cref="M:TcpInteract.ClientBase.Dispose"/>
            right after calling this method.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientSideClient.RequestLogin">
            <summary>
            Try to connect, according to the set <see cref="P:TcpInteract.ClientSideClient.MaxConnectionAttempts"/>, asynchronously.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:TcpInteract.AlreadyLoggedInException"></exception>
        </member>
        <member name="T:TcpInteract.DebugTools.ReflectedCommand">
            <summary>
            Represents a command that has been identified with <see cref="N:System.Reflection"/>.
            Compared using the Value property.
            </summary>
        </member>
        <member name="P:TcpInteract.DebugTools.ReflectedCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:TcpInteract.DebugTools.ReflectedCommand.Value">
            <summary>
            Gets the value of the command. This should be a base number type.
            </summary>
        </member>
        <member name="P:TcpInteract.DebugTools.ReflectedCommand.IsEnum">
            <summary>
            Gets whether this command is an enumeration.
            </summary>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.#ctor">
            <summary>
            Initializes the <see cref="T:TcpInteract.DebugTools.ReflectedCommand"/> class.
            </summary>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.DebugTools.ReflectedCommand"/> class
            with the specified arguments.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="value">The value of the command. This should be a base number type.</param>
            <param name="isEnum">Whether this command is an enumeration.</param>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.Equals(TcpInteract.DebugTools.ReflectedCommand)">
            <summary>Determines whether the specified ReflectedCommand is equal to the current ReflectedCommand.</summary>
            <returns>true if the specified ReflectedCommand is equal to the current ReflectedCommand; otherwise, false.</returns>
            <param name="other">The ReflectedCommand to compare with the current ReflectedCommand.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.op_Equality(TcpInteract.DebugTools.ReflectedCommand,TcpInteract.DebugTools.ReflectedCommand)">
            <summary>
            Determines whether the two specified ReflectedCommands have the same value.
            </summary>
            <param name="a">The first command to compare, or null.</param>
            <param name="b">The first command to compare, or null.</param>
            <returns>True if the value of "a" is the same as the value of "b"; otherwise, false.</returns>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.op_Inequality(TcpInteract.DebugTools.ReflectedCommand,TcpInteract.DebugTools.ReflectedCommand)">
            <summary>
            Determines whether the two specified ReflectedCommands do not have the same value.
            </summary>
            <param name="a">The first command to compare, or null.</param>
            <param name="b">The first command to compare, or null.</param>
            <returns>True if the value of "a" is different from the value of "b"; otherwise, false.</returns>
        </member>
        <member name="M:TcpInteract.DebugTools.ReflectedCommand.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:TcpInteract.DebugTools.Utilities">
            <summary>
            Provides debugging and productivity tools for the <see cref="N:TcpInteract"/> library.
            </summary>
        </member>
        <member name="M:TcpInteract.DebugTools.Utilities.GetConflictingCommands">
            <summary>
            Checks for conflicting commands in the project. Looks through the possible values of
            enumeration types with "command" or "cmd" in the name, as well as the fields in static classes
            named similarly.
            </summary>
        </member>
        <member name="T:TcpInteract.BaseCommands">
            <summary>
            Commands to be used for both the server and client.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.Syncronize">
            <summary>
            Client to Server: The client is requesting initial data so it may synchronize with
            the server and/or other clients.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.Login">
            <summary>
            Client To Server: A request to login.
            Server To Client: The server has approved of the login.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.ConnectionRefused">
            <summary>
            Server To Client: That the clients attempt to connect or login has been refused.
            The content of the corresponding package will contain an error code specifying what was invalid.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.Logout">
            <summary>
            Server To Client: A client has logged out.
             Client To Server: A client has disconnected.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.ServerClosed">
            <summary>
            Server To Client: The server has been closed.
            </summary>
        </member>
        <member name="F:TcpInteract.BaseCommands.ClientNames">
            <summary>
            Client To Server: Requests a list of client names.
            Server To Client: The content is a list of client names separated by '|'.
            </summary>
        </member>
        <member name="T:TcpInteract.ConnectionRefusedReason">
            <summary>
            Describes the possible reasons why a connection may be refused.
            </summary>
        </member>
        <member name="F:TcpInteract.ConnectionRefusedReason.None">
            <summary>
            No reason.
            </summary>
        </member>
        <member name="F:TcpInteract.ConnectionRefusedReason.EmptyName">
            <summary>
            Name is null, empty, or whitespace.
            </summary>
        </member>
        <member name="F:TcpInteract.ConnectionRefusedReason.NameExists">
            <summary>
            A logged in client already has that name.
            </summary>
        </member>
        <member name="F:TcpInteract.ConnectionRefusedReason.NameHasInvalids">
            <summary>
            Name has invalid characters.
            </summary>
        </member>
        <member name="F:TcpInteract.ConnectionRefusedReason.NoLogin">
            <summary>
            The client connected but did not log in soon enough.
            </summary>
        </member>
        <member name="T:TcpInteract.LogoutReason">
            <summary>
            Specifies the reason for the logout.
            </summary>
        </member>
        <member name="F:TcpInteract.LogoutReason.UserSpecified">
            <summary>
            The user has initiated the logout. This almost always indicates a graceful disconnect.
            </summary>
        </member>
        <member name="F:TcpInteract.LogoutReason.TimedOut">
            <summary>
            The client has lost connection ungracefully.
            </summary>
        </member>
        <member name="F:TcpInteract.LogoutReason.Kicked">
            <summary>
            The client has been kicked by the server.
            </summary>
        </member>
        <member name="T:TcpInteract.ClientStatus">
            <summary>
            Specifies the connection status of the client.
            </summary>
        </member>
        <member name="F:TcpInteract.ClientStatus.Disconnected">
            <summary>
            The client is not connected to any server.
            </summary>
        </member>
        <member name="F:TcpInteract.ClientStatus.Connecting">
            <summary>
            The client is connecting to a server but not logged in.
            </summary>
        </member>
        <member name="F:TcpInteract.ClientStatus.Connected">
            <summary>
            The client is connected to a server but not logged in.
            </summary>
        </member>
        <member name="F:TcpInteract.ClientStatus.LoggedIn">
            <summary>
            The client is logged in. It has been approved by the server.
            </summary>
        </member>
        <member name="T:TcpInteract.ServerClosedContent">
            <summary>
            Content that indicates the server has closed.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerClosedContent.Message">
            <summary>
            Gets the message the server has for its clients. Example: The reason why
            the server was closed.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerClosedContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ServerClosedContent"/> class
            with the specified argument.
            </summary>
            <param name="message">The message the server has for its clients.</param>
        </member>
        <member name="T:TcpInteract.ConnectionRefusedContent">
            <summary>
            Content that indicates what client was Kicked and for what reason.
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionRefusedContent.Reason">
            <summary>
            Gets the reason in which the indicated client has been refused.
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionRefusedContent.ClientName">
            <summary>
            Gets the name of the client that has been refused.
            </summary>
        </member>
        <member name="M:TcpInteract.ConnectionRefusedContent.#ctor(TcpInteract.ConnectionRefusedReason,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ConnectionRefusedContent"/> class
            with the specified arguments.
            </summary>
            <param name="reason">The reason in which the indicated client has been refused.</param>
            <param name="clientName">The name of the client that has been refused.</param>
        </member>
        <member name="T:TcpInteract.ClientNamesContent">
            <summary>
            Content that lists the names of all clients logged in.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientNamesContent.Names">
            <summary>
            Gets the client names received.
            </summary>
        </member>
        <member name="P:TcpInteract.ClientNamesContent.Count">
            <summary>
            Gets how many client names were received.
            </summary>
        </member>
        <member name="M:TcpInteract.ClientNamesContent.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ClientNamesContent"/> class
            with the specified argument.
            </summary>
            <param name="names">The client names received.</param>
        </member>
        <member name="T:TcpInteract.LogoutContent">
            <summary>
            Content that describes what client has logged out and for what reason.
            </summary>
        </member>
        <member name="P:TcpInteract.LogoutContent.Reason">
            <summary>
            Gets the reason in which the client has logged out.
            </summary>
        </member>
        <member name="P:TcpInteract.LogoutContent.ClientName">
            <summary>
            Gets the name of the client that was logged out.
            </summary>
        </member>
        <member name="P:TcpInteract.LogoutContent.Message">
            <summary>
            Gets the outro message for the logout. For instance, a goodbye message
            for willful logouts or a server kick message describing the nature of the kick.
            </summary>
        </member>
        <member name="M:TcpInteract.LogoutContent.#ctor(System.String,TcpInteract.LogoutReason,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.LogoutContent"/> class
            with the specified arguments.
            </summary>
            <param name="clientName">The name of the client that has logged out.</param>
            <param name="reason">The reason in which the client has logged out.</param>
            <param name="message">The outro message for the logout.</param>
        </member>
        <member name="T:TcpInteract.LoginContent">
            <summary>
            Content to describe a successful client login.
            </summary>
        </member>
        <member name="P:TcpInteract.LoginContent.ClientName">
            <summary>
            Gets the name of the client that has logged in.
            </summary>
        </member>
        <member name="M:TcpInteract.LoginContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.LoginContent"/> class
            with the specified arguments.
            </summary>
            <param name="clientName">The name of the client that has logged in.</param>
        </member>
        <member name="T:TcpInteract.ConnectionAttemptFailedEventArgs">
            <summary>
            Provides event arguments for the <see cref="E:TcpInteract.ClientSideClient.ConnectionAttemptFailed"/> event.
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionAttemptFailedEventArgs.ConnectionAttempts">
            <summary>
            Gets how many connection attempts have been made.
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionAttemptFailedEventArgs.ReachedMaximumAttempts">
            <summary>
            Gets whether the maximum amount of attempts is reached.
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionAttemptFailedEventArgs.Aborted">
            <summary>
            Gets whether attempting to connect was aborted. (Not connection itself).
            </summary>
        </member>
        <member name="P:TcpInteract.ConnectionAttemptFailedEventArgs.EndOfAttempts">
            <summary>
            Gets whether the connector has stopped trying to connect. If <see cref="P:TcpInteract.ConnectionAttemptFailedEventArgs.Aborted"/> or
            <see cref="P:TcpInteract.ConnectionAttemptFailedEventArgs.ReachedMaximumAttempts"/> is true, then the value of the <see cref="P:TcpInteract.ConnectionAttemptFailedEventArgs.EndOfAttempts"/>
            property will be true.
            </summary>
        </member>
        <member name="M:TcpInteract.ConnectionAttemptFailedEventArgs.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ConnectionAttemptFailedEventArgs"/> class
            with the specified arguments.
            </summary>
            <param name="connectionAttempts">How many connection attempts have been made.</param>
            <param name="reachedMaximumAttempts">Whether the maximum amount of attempts is reached.</param>
            <param name="aborted">Whether attempting to connect was aborted. (Not connection itself).</param>
        </member>
        <member name="T:TcpInteract.ExtensionMethods">
            <summary>
            Provides extension methods to ease the development of networked applications.
            </summary>
        </member>
        <member name="M:TcpInteract.ExtensionMethods.Indistinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets indistinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <param name="items"></param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:TcpInteract.ExtensionMethods.Append(System.Byte[],System.Byte[])">
            <summary>
            Combines two byte arrays into one larger array.
            </summary>
        </member>
        <member name="M:TcpInteract.ExtensionMethods.TrimStart(System.Byte[],System.Int32)">
            <summary>
            Trims the specified amount of bytes off of the start of the array.
            </summary>
        </member>
        <member name="T:TcpInteract.AlreadyLoggedInException">
            <summary>
            The exception that is thrown when trying to log in the client when it is already logged in.
            </summary>
        </member>
        <member name="M:TcpInteract.AlreadyLoggedInException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.AlreadyLoggedInException"/> class
            with the specified arguments.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:TcpInteract.Package">
            <summary>
            Represents a command and the data that corresponds to the command.
            </summary>
        </member>
        <member name="P:TcpInteract.Package.Command">
            <summary>
            Gets the command that denotes what the package contains and what should be done
            in response to the package being received.
            </summary>
        </member>
        <member name="P:TcpInteract.Package.Content">
            <summary>
            Gets the content of the package (the type is determined by the command).
            </summary>
        </member>
        <member name="M:TcpInteract.Package.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.Package"/> class
            with the specified arguments.
            </summary>
            <param name="command">The command/interaction to specify the meaning 
            of the package and what is in the contents.</param>
            <param name="content">The contents of the package (the type is determined by the Interaction).</param>
        </member>
        <member name="M:TcpInteract.Package.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.Package"/> class
            with the specified arguments.
            </summary>
            <param name="command">The command/interaction to specify the meaning of the package and what is in the contents</param>
        </member>
        <member name="M:TcpInteract.Package.#ctor(TcpInteract.BaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.Package"/> class
            with the specified arguments.
            </summary>
            <param name="command">The command/interaction to specify the meaning 
            of the package and what is in the contents.</param>
        </member>
        <member name="M:TcpInteract.Package.#ctor(TcpInteract.BaseCommands,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.Package"/> class
            with the specified arguments.
            </summary>
            <param name="command">The command/interaction to specify the meaning 
            of the package and what is in the contents.</param>
            <param name="content">The contents of the package (the type is determined by the Interaction).</param>
        </member>
        <member name="M:TcpInteract.Package.Serialize">
            <summary>
            Serializes the instance into bytes.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:TcpInteract.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:TcpInteract.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:TcpInteract.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:TcpInteract.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:TcpInteract.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:TcpInteract.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:TcpInteract.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:TcpInteract.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:TcpInteract.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:TcpInteract.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:TcpInteract.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:TcpInteract.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:TcpInteract.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:TcpInteract.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:TcpInteract.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:TcpInteract.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:TcpInteract.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:TcpInteract.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:TcpInteract.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:TcpInteract.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:TcpInteract.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:TcpInteract.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:TcpInteract.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:TcpInteract.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:TcpInteract.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:TcpInteract.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:TcpInteract.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:TcpInteract.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:TcpInteract.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:TcpInteract.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:TcpInteract.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:TcpInteract.SerializableContent`1">
            <summary>
            Represents content that can be serialized and deserialized.
            </summary>
        </member>
        <member name="M:TcpInteract.SerializableContent`1.Serialize">
            <summary>
            Serialize object using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="M:TcpInteract.SerializableContent`1.Deserialize(System.Byte[])">
            <summary>
            Deserialize data using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="T:TcpInteract.ISerializable">
            <summary>
            Implements functionality to serialize an instance.
            </summary>
        </member>
        <member name="M:TcpInteract.ISerializable.Serialize">
            <summary>
            Implements an instance serializer.
            </summary>
        </member>
        <member name="T:TcpInteract.Networking">
            <summary>
            Provides network-related functionality.
            </summary>
        </member>
        <member name="M:TcpInteract.Networking.GetPublicIpString">
            <summary>
            Gets the remote IP address of this machine.
            </summary>
            <exception cref="T:System.Data.DataException">The web content downloaded did not contain an address.</exception>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:TcpInteract.Networking.GetPublicIpStringTaskAsync">
            <summary>
            Gets the remote IP address of this machine asynchronously.
            </summary>
            <exception cref="T:System.Data.DataException">The web content downloaded did not contain an address.</exception>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="T:TcpInteract.ServerBase">
            <summary>
            Provides the base functionality for a <see cref="N:TcpInteract"/> TCP server.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.Pusher">
            <summary>
            Gets the content pusher notification system for the server.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.RefusePattern">
            <summary>
            Gets or sets the pattern that when matched on a client name, will refuse the client.
            The default pattern will not allow users to login with certain chars.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:TcpInteract.ServerBase.BufferSize">
            <summary>
            Gets or sets the send and receive buffer size for the server socket.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.PollWait">
            <summary>
            Gets or sets the time to wait (in microseconds) for a response when polling a connection.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.SolicitorCheckInterval">
            <summary>
            Gets or sets the time, in milliseconds, to wait between solicitor checks.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.TimedOutCheckInterval">
            <summary>
            Gets or sets the time, in milliseconds, to wait between checks for timed
            out clients.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.SolicitorThreshold">
            <summary>
            Gets or sets the time, in milliseconds, in which a client has to be connected
            but not logged in to be considered a solicitor. Solicitors are disconnected from
            the server once identified. A value of 3000 means that a client can be connected for
            3 seconds without logging in, before the server disconnects the client.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.Port">
            <summary>
            Gets the port number to listen on (1 - 65,535).
            </summary>
        </member>
        <member name="F:TcpInteract.ServerBase.clients">
            <summary>
            Gets the clients currently connected to this server.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.Clients">
            <summary>
            Gets a read-only list of all connected clients.
            </summary>
        </member>
        <member name="P:TcpInteract.ServerBase.ClientNames">
            <summary>
            Gets a bindable, read-only list of client names.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerBase.#ctor(System.Int32,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ServerBase"/> class
            with the specified argument.
            </summary>
            <param name="port">The port to bind to.</param>
            <param name="syncContext">The synchronization context to use for marshaling calls onto the main thread.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.OnConnectionRefused(TcpInteract.ConnectionRefusedContent)">
            <summary>
            Raised when the server refuses the connection of a client.
            </summary>
            <param name="content">Describes why the client has been refused.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.OnClientLoggedOut(TcpInteract.LogoutContent)">
            <summary>
            Raised when a client logs out.
            </summary>
            <param name="content">Describes the reason why the client logged out.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.OnClientLoggedIn(System.String)">
            <summary>
            Raised when a client logs in.
            </summary>
            <param name="clientName">The name of the client that has logged in.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.OnPackageReceived(TcpInteract.ServerSideClient,TcpInteract.Package)">
            <summary>
            When a client receives an entire package, this method is to be used to process it.
            </summary>
            
        </member>
        <member name="M:TcpInteract.ServerBase.CheckForSolicitors">
            <summary>
            Looks for clients that are connected but not doing anything and removes them.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerBase.CheckForTimedOut">
            <summary>
            Looks for, and removes timed out clients.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerBase.SendClientNames(TcpInteract.ServerSideClient)">
            <summary>
            Sends the names of all of the clients which are logged in to a specified client.
            </summary>
            <param name="client">The client to send the names to.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.GetClientInfo(System.String)">
            <summary>
            Gets the key information about the specified client.
            </summary>
            <param name="clientName">The name of the client.</param>
            <returns>Null, if no client exists with the specified name.</returns>
        </member>
        <member name="M:TcpInteract.ServerBase.Synchronize(TcpInteract.ServerSideClient)">
            <summary>
            Sends synchronization data to the specified client.
            </summary>
            <param name="client">The client to send sync data to.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.GetRefuseReason(System.String)">
            <summary>
            Checks the specified package for validity. If the name is valid, the method
            yield None, otherwise it will have other flags set indicating obscurities.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerBase.Start(System.Int32)">
            <summary>
            Starts listening for clients.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Raises when socket address is already in use.</exception>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.Stop(System.String)">
            <summary>
            Stops the server.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TcpInteract.ServerBase.StopTaskAsync(System.String)">
            <summary>
            Stops the server.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TcpInteract.ServerBase.ProcessLoginPackage(TcpInteract.ServerSideClient,TcpInteract.Package)">
            <summary>
            Analyzes the login package to see if it is a valid login. If it is, then login the client.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerBase.BroadcastPackage(TcpInteract.Package,TcpInteract.ServerSideClient,System.Boolean)">
            <summary>
            Sends the specified package to all connected clients except the specified one.
            </summary>
            <param name="package">The <see cref="T:TcpInteract.Package"/> to send to the clients.</param>
            <param name="excludeClient">The client to exclude from the broadcast</param>
            <param name="mustBeLoggedIn">Whether the package is sent to all connected clients or 
            just the ones that are logged in.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.BroadcastPackage(TcpInteract.Package,System.Boolean)">
            <summary>
            Sends the specified package to all connected clients.
            </summary>
            <param name="package">The <see cref="T:TcpInteract.Package"/> to send to all of the clients.</param>
            <param name="mustBeLoggedIn">Whether the package is sent to all connected clients or 
            just the ones that are logged in.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.BroadcastPackageAsync(TcpInteract.Package,System.Boolean)">
            <summary>
            Sends the specified package to all connected clients asynchronously.
            </summary>
            <param name="package">The <see cref="T:TcpInteract.Package"/> to send to all of the clients.</param>
            <param name="mustBeLoggedIn">Whether the package is sent to all connected clients or 
            just the ones that are logged in.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.BroadcastPackageAsync(TcpInteract.Package,TcpInteract.ServerSideClient,System.Boolean)">
            <summary>
            Sends the specified package asynchronously to all connected clients except the specified one.
            </summary>
            <param name="package">The <see cref="T:TcpInteract.Package"/> to send to the clients.</param>
            <param name="excludeClient">The client to exclude from the broadcast</param>
            <param name="mustBeLoggedIn">Whether the package is sent to all connected clients or 
            just the ones that are logged in.</param>
        </member>
        <member name="M:TcpInteract.ServerBase.KickClient(System.String,System.String)">
            <summary>
            Boots the specified client from the server.
            </summary>
            <exception cref="T:System.ArgumentException">Client could not be found.</exception>
        </member>
        <member name="M:TcpInteract.ServerBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:TcpInteract.ServerBase"/>.
            </summary>
        </member>
        <member name="T:TcpInteract.ServerSideClient">
            <summary>
            Represents a TCP client to be used in server-side applications.
            </summary>
        </member>
        <member name="T:TcpInteract.ServerSideClient.PackageReceivedHandler">
            <summary>
            Handles the <see cref="F:TcpInteract.ServerSideClient.PackageReceived"/> method and delegate.
            </summary>
            <param name="sender">This instance.</param>
            <param name="args">The completed package.</param>
        </member>
        <member name="F:TcpInteract.ServerSideClient.PackageReceived">
            <summary>
            Occurs when a <see cref="T:TcpInteract.Package"/> has been received.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <see cref="T:TcpInteract.ClientBase"/> class as a server-side client.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.TimeStampLogin">
            <summary>
            Sets the <see cref="P:TcpInteract.ClientBase.LoggedInTime"/> to the time this method is called.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.OnPackageReceived(TcpInteract.Package)">
            <summary>
            Raises when a client received a completed <see cref="T:TcpInteract.Package"/>.
            </summary>
            <param name="package">The package that has been received.</param>
        </member>
        <member name="M:TcpInteract.ServerSideClient.OnLoggedOut(TcpInteract.LogoutContent)">
            <summary>
            Raises when a client logs out.
            </summary>
            <param name="content">Content that describes what client has logged out and for what reason.</param>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackageAsync(System.Int32)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackageAsync(TcpInteract.Package)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackageTaskAsync(TcpInteract.Package)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
            <returns>How many bytes were sent.</returns>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackageTaskAsync(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
            <returns>How many bytes were sent.</returns>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackageAsync(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the specified package asynchronously to the server.
            </summary>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackage(System.Int32,TcpInteract.ISerializable)">
            <summary>
            Sends the package synchronously to the server.
            </summary>
            <returns>Returns the amount of data sent in bytes.</returns>
        </member>
        <member name="M:TcpInteract.ServerSideClient.SendPackage(TcpInteract.Package)">
            <summary>
            Sends the package synchronously to the server.
            </summary>
            <returns>Returns the amount of data sent in bytes.</returns>
        </member>
        <member name="T:TcpInteract.ContentPusher">
            <summary>
            Binds <see cref="T:System.Action"/>s to <see cref="T:System.Type"/>s to provide a simple notification system.
            Objects are pushed to be relayed to any Type-Action binding that has the type of the object.
            Instead of subscribing to solid events, types are subscribed to, dynamically. All subscribed
            methods require a single parameter.
            </summary>
        </member>
        <member name="M:TcpInteract.ContentPusher.Push``1(``0)">
            <summary>
            Push an argument into the <see cref="T:TcpInteract.ContentPusher"/> to be handled by any Action-Type binding.
            </summary>
            <param name="arg">The argument to be passed into Actions which handle the arguments type.</param>
            <returns>How many actions were invoked.</returns>
        </member>
        <member name="M:TcpInteract.ContentPusher.Unbind``1(System.Action{``0})">
            <summary>
            Removes all subscriptions this delegate may have.
            </summary>
            <param name="action">The action to unsubscribe.</param>
            <returns>True, if 1 or more bindings were removed, otherwise false.</returns>
        </member>
        <member name="M:TcpInteract.ContentPusher.Bind``1(System.Action{``0})">
            <summary>
            Subscribes an <see cref="T:System.Action"/> with one parameter.
            </summary>
            <typeparam name="T">The type of arguments the specified <see cref="T:System.Action"/> will handle.</typeparam>
            <param name="action">The <see cref="T:System.Action"/> to handle arguments of the specified <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:TcpInteract.UiContext">
            <summary>
            Represents the UI's execution context.
            </summary>
        </member>
        <member name="F:TcpInteract.UiContext.Default">
            <summary>
            The only instance of the <see cref="T:TcpInteract.UiContext"/> class.
            </summary>
        </member>
        <member name="P:TcpInteract.UiContext.InvokeRequired">
            <summary>
            Gets whether invoke is required to run logic on the UI thread.
            </summary>
        </member>
        <member name="P:TcpInteract.UiContext.Initialized">
            <summary>
            Gets whether this instance has been initialized.
            </summary>
        </member>
        <member name="M:TcpInteract.UiContext.Initialize(System.Threading.SynchronizationContext)">
            <summary>
            Initializes the internal synchronization context. Only call this when the
            UI <see cref="T:System.Threading.SynchronizationContext"/> is available (after a UI element has been created).
            </summary>
            <returns>True, if the context was successfully initialized. Otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The UI Context could not initialize at this time.</exception>
        </member>
        <member name="M:TcpInteract.UiContext.Invoke(System.Action)">
            <summary>
            Invokes an <see cref="T:System.Action"/> on the UI thread.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TcpInteract.UiContext.Invoke``1(System.Action{``0},``0)">
            <summary>
            Invokes an <see cref="T:System.Action"/> on the UI thread.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TcpInteract.UiContext.Invoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Invokes an <see cref="T:System.Action"/> on the UI thread.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
    </members>
</doc>
